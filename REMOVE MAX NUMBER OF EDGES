class Solution {
    public int maxNumEdgesToRemove(int n, int[][] edges) {
       TRAVERSE alice=new TRAVERSE(n);
       TRAVERSE bob=new TRAVERSE(n); 
       int E=0;
       for(int[] j:edges){
            if(j[0]==3)
                E+=(alice.FULLY(j[1],j[2]) | bob.FULLY(j[1],j[2]));
        }
        for(int[] j:edges){
            if(j[0]==2)
                E+=bob.FULLY(j[1],j[2]);
            else if(j[0]==1)
                E+=alice.FULLY(j[1],j[2]);
        }
        if(alice.BOOL() && bob.BOOL())
            return edges.length-E;
        return -1;
    }
    class TRAVERSE{
        int[] U;
        int[] V;
        int O;
        TRAVERSE(int n){
            O=n;
            U=new int[n+1];
            V=new int[n+1];
            for(int i=0;i<=n;i++){
                U[i]=i;
                V[i]=i;
            }
        }
        int NUMBER(int x){
            if(U[x]==x)
                return x;
            return U[x]=NUMBER(U[x]);
        }
        int FULLY(int x,int y){
            x=NUMBER(x); 
            y=NUMBER(y);
            if(x==y)
                return 0;
            if(V[x]>V[y]){
                V[x]+=V[y];
                U[y]=x;
            } 
            else{
                V[y]+=V[x];
                U[x]=y;
            }
            O--;
            return 1;
        }
        boolean BOOL(){
            return O==1;
        }
    }    
}
