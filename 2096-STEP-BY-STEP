/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean find(TreeNode n,int V,StringBuilder B){
        if(n.val==V)
            return true;
        if(n.left!=null && find(n.left,V,B))
            B.append("L");
        else if(n.right!=null && find(n.right,V,B))
            B.append("R");
        return B.length()>0;
    }
    public String getDirections(TreeNode root,int startValue,int destValue) {
        StringBuilder s=new StringBuilder();
        StringBuilder d=new StringBuilder();
        find(root,startValue,s);
        find(root,destValue,d);
        int i=0;
        int max_i=Math.min(d.length(),s.length());
        while(i<max_i && s.charAt(s.length()-i-1)==d.charAt(d.length()-i-1))
            i++;
        return "U".repeat(s.length()-i)+d.reverse().toString().substring(i);
    }
}
